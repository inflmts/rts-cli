#!/usr/bin/env node
// rts-cli

import crypto from 'crypto';
import https from 'https';
import { program } from 'commander';

// These keys can be easily found by inspecting https://riderts.app.
// They will probably stop working in the future.
const apiKey = process.env.RTS_API_KEY || 'Qskvu4Z5JDwGEVswqdAVkiA5B';
const requestKey = process.env.RTS_REQUEST_KEY || 'ZSqCAFdU7bwxHJUHKYfQUxKin06hMxCK';

function hmacSha256(key, data) {
  const hmac = crypto.createHmac('sha256', key);
  hmac.update(data);
  return hmac.digest('hex');
}

function captureOutput(stream) {
  return new Promise((resolve, reject) => {
    let output = '';
    stream.setEncoding('utf8');
    stream.on('data', chunk => { output += chunk; });
    stream.on('end', () => resolve(output));
    stream.on('error', reject);
  });
}

function rawApi(endpoint, params) {
  let path = `/api/v3/${endpoint}?key=${apiKey}&format=json`;
  if (params)
    for (const [name, value] of Object.entries(params))
      path += `&${name}=${encodeURIComponent(value)}`;

  // this comes from a little bit of trial and error
  const dateString = new Date().toUTCString();
  const requestId = hmacSha256(requestKey, path + dateString);

  const options = {
    method: 'GET',
    host: 'riderts.app',
    path: '/bustime' + path,
    headers: {
      'accept': 'application/json',
      'user-agent': '@inflmts/rts-cli',
      'x-date': dateString,
      'x-request-id': requestId
    }
  };

  return new Promise((resolve, reject) => {
    const req = https.request(options, (res) => {
      if (res.statusCode === 200)
        resolve(res);
      else
        reject(new Error(`Server responded with status code ${res.statusCode}`));
    });
    req.on('error', reject);
    req.end();
  });
}

async function api(endpoint, params) {
  const res = await rawApi(endpoint, params);
  const raw = await captureOutput(res);
  return JSON.parse(raw)['bustime-response'];
}

program
  .name('rts')
  .description('Unofficial GNV RideRTS CLI')
  .allowExcessArguments(false);

program
  .command('routes')
  .summary('list routes')
  .description('List routes')
  .action(
async function () {
  const data = await api('getroutes');
  for (const route of data.routes)
    process.stdout.write(`${route.rt.padEnd(6)}${route.rtnm}\n`);
});

program
  .command('stops')
  .summary('list stops for a route')
  .argument('<route>')
  .action(
async function (routeId) {
  const data = await Promise.all(['OUTBOUND', 'INBOUND']
    .map(dir => api('getstops', { rt: routeId, dir })));
  function print(dir, d) {
    process.stdout.write(`${dir}:\n`);
    for (const s of d.stops) {
      process.stdout.write(`  ${s.stpid} ${s.stpnm}\n`);
    }
  }
  print('Outbound', data[0]);
  print('Inbound', data[1]);
});

program
  .command('predict')
  .summary('get predictions for a stop')
  .description('Get predictions for a stop')
  .argument('<stop>')
  .action(
async function (stopId, opts) {
  const data = await api('getpredictions', { stpid: stopId });
  if (data.prd) {
    for (const p of data.prd) {
      const countdown = p.prdctdn === 'DUE' ? 'DUE' : `${p.prdctdn}m`;
      process.stdout.write(`${p.rt.padEnd(8)}${countdown.padEnd(8)}${p.des}\n`);
    }
  }
});

program
  .command('board')
  .summary('start realtime prediction board')
  .description('Start the realtime prediction board')
  .argument('<stop>')
  .action(
async function (stop, opts) {
  if (!process.stdin.isTTY || !process.stderr.isTTY)
    process.exit(1);

  const stopData = await api('getstops', { stpid: stop, unixTime: 'true' });
  if (!stopData.stops)
    this.error(`no such stop: ${stop}`);
  const stopName = stopData.stops[0].stpnm;

  const routesData = await api('getroutes');
  const routes = Object.create(null);
  for (const r of routesData.routes) {
    const id = r.rt;
    const name = r.rtnm;
    const red = parseInt(r.rtclr.slice(1, 3), 16);
    const green = parseInt(r.rtclr.slice(3, 5), 16);
    const blue = parseInt(r.rtclr.slice(5, 7), 16);
    routes[id] = { id, name, red, green, blue };
  }

  async function update() {
    const data = await api('getpredictions', { stpid: stop, unixTime: 'true' });
    process.stderr.cursorTo(0, 3);
    process.stderr.clearScreenDown();
    for (const p of data.prd) {
      const route = routes[p.rt];
      const colseq = route ? `\x1b[38;2;${route.red};${route.green};${route.blue}m` : '';
      const countdown = p.prdctdn === 'DUE' ? '\x1b[1;36mDUE\x1b[0m ' : `${p.prdctdn}m`.padEnd(4);
      process.stderr.write(`  ${colseq}${p.rt.padEnd(4)}  \x1b[0m${countdown}  \u2192 ${p.des}\n`);
    }
    setTimeout(update, 15000);
  }

  process.stderr.cursorTo(0, 0);
  process.stderr.clearScreenDown();
  process.stderr.write(`\n  ${stop} | \x1b[1m${stopName}\x1b[0m`);
  update();
});

program
  .command('api')
  .summary('make raw API call')
  .description('Make a raw API call')
  .argument('<endpoint>', 'name of bustime function')
  .argument('[params...]', 'query parameters in the form name=value')
  .action(
function (endpoint, args) {
  const params = Object.create(null);
  for (const arg of args) {
    const i = arg.indexOf('=');
    if (i >= 0)
      params[arg.slice(0, i)] = arg.slice(i + 1);
  }
  rawApi(endpoint, params).then(res => res.pipe(process.stdout));
});

program.parse();
